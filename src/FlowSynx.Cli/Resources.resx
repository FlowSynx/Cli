<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddConfigCommandCouldNotParseSpecifications" xml:space="preserve">
    <value>Could not parse the entered specifications. Please check it and try again!</value>
  </data>
  <data name="AddConfigCommandDescription" xml:space="preserve">
    <value>Add configuration section</value>
  </data>
  <data name="AddConfigCommandNameOption" xml:space="preserve">
    <value>The unique configuration section name</value>
  </data>
  <data name="AddConfigCommandSpecificationOption" xml:space="preserve">
    <value>The specifications regarding configuration section. They should be passed in pairs of key value</value>
  </data>
  <data name="AddConfigCommandTypeOption" xml:space="preserve">
    <value>The type of plugin supported by FlowSynx</value>
  </data>
  <data name="CheckCommandCheckHashOption" xml:space="preserve">
    <value>Compare and check the hashes of entities</value>
  </data>
  <data name="CheckCommandCheckSizeOption" xml:space="preserve">
    <value>Compare and check the sizes of entities</value>
  </data>
  <data name="CheckCommandDescription" xml:space="preserve">
    <value>Checks the files in the source and destination match</value>
  </data>
  <data name="CheckCommandDestinationPathOption" xml:space="preserve">
    <value>The storage destination's path to be checked against</value>
  </data>
  <data name="CheckCommandOneWayOption" xml:space="preserve">
    <value>Only check that entities in the source match the entities in the destination, not the other way around</value>
  </data>
  <data name="CheckCommandSourcePathOption" xml:space="preserve">
    <value>The storage source's path that to be checked</value>
  </data>
  <data name="CommandAddressOption" xml:space="preserve">
    <value>The address that specify a http-based address to connect on remote FlowSynx system</value>
  </data>
  <data name="CommandCaseSensitiveOption" xml:space="preserve">
    <value>Ignore or apply case sensitive in filters</value>
  </data>
  <data name="CommandDashboardVersionOption" xml:space="preserve">
    <value>The version of the FlowSynx dashboard to install, for example: 0.1.0</value>
  </data>
  <data name="CommandExcludeOption" xml:space="preserve">
    <value>Exclude entities matching pattern</value>
  </data>
  <data name="CommandFlowSynxVersionOption" xml:space="preserve">
    <value>The version of the FlowSynx system to install, for example: 0.1.0</value>
  </data>
  <data name="CommandForceOption" xml:space="preserve">
    <value>Force terminate FlowSynx system and Dashboard if they are running</value>
  </data>
  <data name="CommandFullOption" xml:space="preserve">
    <value>Full numbers instead of human-readable</value>
  </data>
  <data name="CommandIncludeOption" xml:space="preserve">
    <value>Include entities matching pattern</value>
  </data>
  <data name="CommandKindOption" xml:space="preserve">
    <value>Kind of entity. Valid values are File, Directory, and FileAndDirectory</value>
  </data>
  <data name="CommandMaxAgeOption" xml:space="preserve">
    <value>Filter entities younger than this in s or suffix ms|s|m|h|d|w|M|y [default: off]</value>
  </data>
  <data name="CommandMaxResultsOption" xml:space="preserve">
    <value>The maximum number of results to return [default: off]</value>
  </data>
  <data name="CommandMaxSizeOption" xml:space="preserve">
    <value>Filter entities smaller than this in KiB or suffix B|K|M|G|T|P [default: off]</value>
  </data>
  <data name="CommandMinAgeOption" xml:space="preserve">
    <value>Filter entities older than this in s or suffix ms|s|m|h|d|w|M|y [default: off]</value>
  </data>
  <data name="CommandMinSizeOption" xml:space="preserve">
    <value>Filter entities bigger than this in KiB or suffix B|K|M|G|T|P [default: off]</value>
  </data>
  <data name="CommandOutputOption" xml:space="preserve">
    <value>Formatting CLI output</value>
  </data>
  <data name="CommandPathOption" xml:space="preserve">
    <value>The storage path from which the about information is to be retrieved</value>
  </data>
  <data name="CommandRecurseOption" xml:space="preserve">
    <value>Apply recursion on filtering entities in the specified path</value>
  </data>
  <data name="CommandSortingOption" xml:space="preserve">
    <value>Sorting entities based on field name and ascending and descending. Like Property ASC, Property2 DESC [default: off]</value>
  </data>
  <data name="CompressCommandCompressTypeOption" xml:space="preserve">
    <value>Type of compression. Valid values are Zip, GZip, Tar</value>
  </data>
  <data name="CompressCommandDataSavedSuccessfully" xml:space="preserve">
    <value>Data saved to the '{0}' successfully.</value>
  </data>
  <data name="CompressCommandDescription" xml:space="preserve">
    <value>Compress of entities regarding specific path</value>
  </data>
  <data name="CompressCommandFilealreadyExist" xml:space="preserve">
    <value>File '{0}' is already exist!</value>
  </data>
  <data name="CompressCommandHashingOption" xml:space="preserve">
    <value>Generate and display hashing content in response data</value>
  </data>
  <data name="CompressCommandNoDataReceived" xml:space="preserve">
    <value>No data received!</value>
  </data>
  <data name="CompressCommandOverwriteOption" xml:space="preserve">
    <value>Overwriting the streaming data if the file (save-to) exists</value>
  </data>
  <data name="CompressCommandPathOption" xml:space="preserve">
    <value>The storage path to be compressed</value>
  </data>
  <data name="CompressCommandSaveToOption" xml:space="preserve">
    <value>The path where the streaming data are going to be saved</value>
  </data>
  <data name="ConfigCommandDescription" xml:space="preserve">
    <value>Manage configurations related to FlowSynx System</value>
  </data>
  <data name="ConfigCommandTypeOption" xml:space="preserve">
    <value>The type of configuration item</value>
  </data>
  <data name="CopyCommandClearDestinationPathOption" xml:space="preserve">
    <value>Clearing all entities and other things in the destination path before starting the copy operation</value>
  </data>
  <data name="CopyCommandDescription" xml:space="preserve">
    <value>Copy entities from source storage to the destination</value>
  </data>
  <data name="CopyCommandDestinationPathOption" xml:space="preserve">
    <value>The storage path to which the entities are to be copied</value>
  </data>
  <data name="CopyCommandOverwriteDataOption" xml:space="preserve">
    <value>Overwriting the data if the entity exists on the destination</value>
  </data>
  <data name="CopyCommandSourcePathOption" xml:space="preserve">
    <value>The storage path from which the entities are to be copied</value>
  </data>
  <data name="DashboardCommandDescription" xml:space="preserve">
    <value>Run and execute the FlowSynx dashboard</value>
  </data>
  <data name="DeleteCommandDescription" xml:space="preserve">
    <value>Delete entities from specific storage path</value>
  </data>
  <data name="DeleteCommandPathOption" xml:space="preserve">
    <value>The storage path from which the entities are to be deleted</value>
  </data>
  <data name="DeleteConfigCommandDescription" xml:space="preserve">
    <value>Delete configuration section</value>
  </data>
  <data name="DeleteConfigCommandNameOption" xml:space="preserve">
    <value>The configuration section name</value>
  </data>
  <data name="DeleteFileCommandDescription" xml:space="preserve">
    <value>Delete entity from specific storage path</value>
  </data>
  <data name="DeleteFileCommandPathOption" xml:space="preserve">
    <value>The entity's path that are going to be deleted</value>
  </data>
  <data name="DetailsConfigCommandDescription" xml:space="preserve">
    <value>Get details about configuration section</value>
  </data>
  <data name="DetailsConfigCommandNameOption" xml:space="preserve">
    <value>The configuration section name</value>
  </data>
  <data name="DownloadFailedWithStatus" xml:space="preserve">
    <value>Download failed with {0}</value>
  </data>
  <data name="ExistFileCommandDescription" xml:space="preserve">
    <value>Check the entity exist on specific path</value>
  </data>
  <data name="ExistFileCommandPathOption" xml:space="preserve">
    <value>The entity's path that going to be checked for existence</value>
  </data>
  <data name="FlowSynxEngineDownloadedAndInstalledSuccessfully" xml:space="preserve">
    <value>FlowSynx engine is downloaded and installed successfully in path '{0}'.</value>
  </data>
  <data name="FlowSynxEngineIsNotInstalled" xml:space="preserve">
    <value>FlowSynx engine is not installed. Please run the 'synx init -h' command to see the details.</value>
  </data>
  <data name="FlowSynxLocationBaseLocationNotFound" xml:space="preserve">
    <value>Base location not found</value>
  </data>
  <data name="FlowSynxLocationRootLocationNotFound" xml:space="preserve">
    <value>Root location not found</value>
  </data>
  <data name="HealthCommandDescription" xml:space="preserve">
    <value>Display the health status of FlowSynx System</value>
  </data>
  <data name="InitCommandBeginningInitialize" xml:space="preserve">
    <value>Beginning Initialize...</value>
  </data>
  <data name="InitCommandDescription" xml:space="preserve">
    <value>Install and initialize FlowSynx system and Dashboard on the current user profile</value>
  </data>
  <data name="ListCommandDescription" xml:space="preserve">
    <value>List of entities regarding specific path</value>
  </data>
  <data name="ListCommandDisplayEntitiesMetadataOption" xml:space="preserve">
    <value>Display entities metadata in response data</value>
  </data>
  <data name="ListCommandHashingOption" xml:space="preserve">
    <value>Display hashing content in response data</value>
  </data>
  <data name="ListCommandPathOption" xml:space="preserve">
    <value>The storage path from which the entities list are to be retrieved</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Logo" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\Logo.txt;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;utf-8</value>
  </data>
  <data name="MakeDirectoryCommandDescription" xml:space="preserve">
    <value>Make the directory on specific storage path</value>
  </data>
  <data name="MakeDirectoryCommandPathOption" xml:space="preserve">
    <value>The storage path to create the directory on</value>
  </data>
  <data name="MoveCommandClearDestinationPathOption" xml:space="preserve">
    <value>Clearing all entities and other things in the destination path before starting the copy operation</value>
  </data>
  <data name="MoveCommandCreateEmptyDirectoriesPathOption" xml:space="preserve">
    <value>Create empty source directories on destination after move</value>
  </data>
  <data name="MoveCommandDescription" xml:space="preserve">
    <value>Move entities from source storage to the destination.</value>
  </data>
  <data name="MoveCommandDestinationPathOption" xml:space="preserve">
    <value>The storage path to which the entities are to be moved</value>
  </data>
  <data name="MoveCommandSourcePathOption" xml:space="preserve">
    <value>The storage path from which the entities are to be moved</value>
  </data>
  <data name="PluginDetailsCommandDescription" xml:space="preserve">
    <value>Display details about a particular plugin</value>
  </data>
  <data name="PluginDetailsCommandIdOption" xml:space="preserve">
    <value>The identifier (Id) of the plugin</value>
  </data>
  <data name="PluginsCommandDescription" xml:space="preserve">
    <value>Display list and details of plugins supported by FlowSynx system</value>
  </data>
  <data name="PluginsCommandTypeOption" xml:space="preserve">
    <value>The namespace of plugin (e.g., Storage)</value>
  </data>
  <data name="PurgeDirectoryCommandDescription" xml:space="preserve">
    <value>Delete the directory and its entities and contents on specific storage path</value>
  </data>
  <data name="PurgeDirectoryCommandPathOption" xml:space="preserve">
    <value>The storage's path that are the directory to be purged</value>
  </data>
  <data name="ReadCommandDescription" xml:space="preserve">
    <value>Read and receive data stream about specific entity</value>
  </data>
  <data name="ReadCommandFileAlreadyExist" xml:space="preserve">
    <value>File '{0}' is already exist!</value>
  </data>
  <data name="ReadCommandHashingOption" xml:space="preserve">
    <value>Display hashing content in response data</value>
  </data>
  <data name="ReadCommandOverwriteOption" xml:space="preserve">
    <value>Overwriting the streaming data if the file (save-to) exists</value>
  </data>
  <data name="ReadCommandPathOption" xml:space="preserve">
    <value>The entity path to be read</value>
  </data>
  <data name="ReadCommandSaveToOption" xml:space="preserve">
    <value>The path where the streaming data are going to be saved</value>
  </data>
  <data name="RootCommandDescription" xml:space="preserve">
    <value>A system for managing and synchronizing data between different repositories and storage, including cloud, local, and etc.</value>
  </data>
  <data name="RunCommandConfigFileOption" xml:space="preserve">
    <value>FlowSynx configuration file</value>
  </data>
  <data name="RunCommandDescription" xml:space="preserve">
    <value>Run and execute the FlowSynx system on the current user profile</value>
  </data>
  <data name="RunCommandEnableHealthCheckOption" xml:space="preserve">
    <value>Enable health checks for the FlowSynx</value>
  </data>
  <data name="RunCommandEnableLogOption" xml:space="preserve">
    <value>Enable logging to records the details of events during FlowSynx running</value>
  </data>
  <data name="RunCommandLogFileOption" xml:space="preserve">
    <value>Log file path to store system logs information</value>
  </data>
  <data name="RunCommandLogLevelOption" xml:space="preserve">
    <value>The log verbosity to controls the amount of detail emitted for each event that is logged</value>
  </data>
  <data name="RunCommandOpenApiOption" xml:space="preserve">
    <value>Enable OpenApi specification for FlowSynx</value>
  </data>
  <data name="SizeCommandDescription" xml:space="preserve">
    <value>Calculate and display total size of entities in specific storage path</value>
  </data>
  <data name="SizeCommandPathOption" xml:space="preserve">
    <value>The storage path from which the entities size are to be calculated</value>
  </data>
  <data name="SomethingWrongHappen" xml:space="preserve">
    <value>Something wrong happen during execute the application</value>
  </data>
  <data name="SpinnerFetching" xml:space="preserve">
    <value>Fetching...</value>
  </data>
  <data name="StartChangeDashboardExecutionMode" xml:space="preserve">
    <value>Starting to change the execution mode of Dashboard.</value>
  </data>
  <data name="StartChangeFlowSynxExecutionMode" xml:space="preserve">
    <value>Starting to change the execution mode of FlowSynx.</value>
  </data>
  <data name="StartDownloadCliBinary" xml:space="preserve">
    <value>Start download Cli binary</value>
  </data>
  <data name="StartDownloadDashboardBinary" xml:space="preserve">
    <value>Start download Dashboard binary</value>
  </data>
  <data name="StartDownloadFlowSynxBinary" xml:space="preserve">
    <value>Start download FlowSynx binary</value>
  </data>
  <data name="StartingExtractDashboardBinary" xml:space="preserve">
    <value>Starting extract Dashboard binary</value>
  </data>
  <data name="StartingExtractFlowSynxBinary" xml:space="preserve">
    <value>Starting extract FlowSynx binary</value>
  </data>
  <data name="StartValidatingCliBinary" xml:space="preserve">
    <value>Start validating Cli binary</value>
  </data>
  <data name="StartValidatingDashboardBinary" xml:space="preserve">
    <value>Start validating Dashboard binary</value>
  </data>
  <data name="StartValidatingFlowSynxBinary" xml:space="preserve">
    <value>Start validating FlowSynx binary</value>
  </data>
  <data name="StopCommandDescription" xml:space="preserve">
    <value>Stop the FlowSynx system which running on the current user profile</value>
  </data>
  <data name="StopCommandFlowSynxStopped" xml:space="preserve">
    <value>The FlowSynx system was stopped successfully.</value>
  </data>
  <data name="StorageAboutCommandDescription" xml:space="preserve">
    <value>Get about information from the storage</value>
  </data>
  <data name="StorageCommandDescription" xml:space="preserve">
    <value>Execute supportable commands on different storage supported by FlowSynx system</value>
  </data>
  <data name="TheDownloadedDataMayHasBeenCorrupted" xml:space="preserve">
    <value>The downloaded data may has been corrupted!</value>
  </data>
  <data name="TheFlowSynxEngineIsAlreadyInitialized" xml:space="preserve">
    <value>The FlowSynx engine is already initialized.</value>
  </data>
  <data name="UninstallCommandBeginningUninstalling" xml:space="preserve">
    <value>Beginning uninstalling...</value>
  </data>
  <data name="UninstallCommandDashboardIsRunning" xml:space="preserve">
    <value>The FlowSynx dashboard is running. Please stop it and try uninstall again.</value>
  </data>
  <data name="UninstallCommandDashboardStoppedSuccessfully" xml:space="preserve">
    <value>The FlowSynx dashboard was stopped successfully.</value>
  </data>
  <data name="UninstallCommandDescription" xml:space="preserve">
    <value>Uninstalling FlowSynx system, Dashboard, and Cli from the current user profile and machine</value>
  </data>
  <data name="UninstallCommandFlowSynxIsRunning" xml:space="preserve">
    <value>The FlowSynx engine is running. Please stop it by run the command: 'Synx stop', and try uninstall again.</value>
  </data>
  <data name="UninstallCommandFlowSynxStoppedSuccessfully" xml:space="preserve">
    <value>The FlowSynx system was stopped successfully.</value>
  </data>
  <data name="UninstallCommandUninstallingIsDone" xml:space="preserve">
    <value>Uninstalling is done!</value>
  </data>
  <data name="UpdateCommandCheckingForCliUpdates" xml:space="preserve">
    <value>Checking for CLI updates...</value>
  </data>
  <data name="UpdateCommandCheckingForDashboardUpdates" xml:space="preserve">
    <value>Checking for Dashboard updates...</value>
  </data>
  <data name="UpdateCommandCheckingForFlowSynxUpdates" xml:space="preserve">
    <value>Checking for FlowSynx updates...</value>
  </data>
  <data name="UpdateCommandCliIsUpdated" xml:space="preserve">
    <value>The current CLI version is up to dated</value>
  </data>
  <data name="UpdateCommandDashboardIsRunning" xml:space="preserve">
    <value>The Dashboard is running. Please stop it before doing uninstall again.</value>
  </data>
  <data name="UpdateCommandDashboardIsUpdated" xml:space="preserve">
    <value>The current Dashboard's version is up to dated</value>
  </data>
  <data name="UpdateCommandDescription" xml:space="preserve">
    <value>Update FlowSynx system, Dashboard, and Cli</value>
  </data>
  <data name="UpdateCommandFlowSynxIsRunning" xml:space="preserve">
    <value>The FlowSynx system is running. Please stop it before doing uninstall again.</value>
  </data>
  <data name="UpdateCommandFlowSynxIsUpdated" xml:space="preserve">
    <value>The current FlowSynx's version is up to dated</value>
  </data>
  <data name="UpdateCommandFlowSynxUpdatedSuccessfully" xml:space="preserve">
    <value>The FlowSynx system updated successfully.</value>
  </data>
  <data name="UpdateScript_Bat" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\UpdateScript_Bat.txt;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;Windows-1252</value>
  </data>
  <data name="UpdateScript_Shell" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\UpdateScript_Shell.txt;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;Windows-1252</value>
  </data>
  <data name="UseUpdateCommandToUpdateFlowSynxAndDashboard" xml:space="preserve">
    <value>You can use command 'Synx update' to check and update the FlowSynx and Dashboard.</value>
  </data>
  <data name="ValidatingDownloadFail" xml:space="preserve">
    <value>Validating download - Fail!</value>
  </data>
  <data name="VersionCommandDescription" xml:space="preserve">
    <value>Display the FlowSynx system, Dashboard, and Cli version</value>
  </data>
  <data name="VersionCommandFullOption" xml:space="preserve">
    <value>Display full details about the running FlowSynx system</value>
  </data>
  <data name="VersionCommandNotInitialized" xml:space="preserve">
    <value>Not initialized</value>
  </data>
  <data name="VersionNotFoundFromUrl" xml:space="preserve">
    <value>Version not found from url: {0}</value>
  </data>
  <data name="WriteCommandContentIsEmpty" xml:space="preserve">
    <value>The content is empty. Please provide a Base64String data.</value>
  </data>
  <data name="WriteCommandDataOption" xml:space="preserve">
    <value>Data (only string or base64 data is supported) should be written</value>
  </data>
  <data name="WriteCommandDescription" xml:space="preserve">
    <value>Write data on specific entity path</value>
  </data>
  <data name="WriteCommandFileNotExist" xml:space="preserve">
    <value>The file {options.FileToUpload} is not exist!</value>
  </data>
  <data name="WriteCommandFileToUploadOption" xml:space="preserve">
    <value>The local file path to upload</value>
  </data>
  <data name="WriteCommandOverwriteOption" xml:space="preserve">
    <value>Overwriting data on storage entity if the entity exists</value>
  </data>
  <data name="WriteCommandPathOption" xml:space="preserve">
    <value>The storage's path to which the data is to be written</value>
  </data>
</root>